// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/java/org/apache/xalan/xsltc/compiler/xpath.lex

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Modified from Jlex manual lookahead to JFlex RE LA */
/*
 * $Id$
 */

/*
 * @author Jacek Ambroziak
 * @author Santiago Pericas-Geertsen
 * @author Morten Jorgensen
 * @author Joseph Kesselman
 */

package org.apache.xalan.xsltc.compiler;

import java_cup.runtime.Symbol;

@SuppressWarnings("fallthrough")
class XPathLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\2\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\4\u0700\1\u1100\7\u0700\1\u1200\1\u1300\1\u1400\1\u1500"+
    "\12\u1600\3\u0700\1\u1700\1\u1800\1\u1900\34\u0700\121\u1a00\1\u1b00"+
    "\14\u0700\53\u1c00\1\u1d00\4\u1e00\4\u1f00\31\u1600\4\u0700\1\u2000"+
    "\1\u0700\1\u2100\u1000\u1600";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\1\1\2\1\3\1\0\1\4"+
    "\2\0\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\12\16\1\17\1\0\1\20\1\21\1\22"+
    "\1\0\1\23\1\24\3\25\1\26\3\25\1\27\4\25"+
    "\1\30\1\31\1\32\1\25\1\33\1\34\1\35\3\25"+
    "\1\36\2\25\1\37\1\0\1\40\1\0\1\25\1\0"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\25\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\25\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\25\1\0\1\70\10\0\1\1\32\0\1\1"+
    "\26\0\1\71\10\0\27\25\1\0\37\25\1\0\u0208\25"+
    "\160\71\16\25\1\0\u02e1\25\12\72\206\25\12\72\u016c\25"+
    "\12\72\166\25\12\72\166\25\12\72\166\25\12\72\166\25"+
    "\12\72\167\25\11\72\166\25\12\72\166\25\12\72\166\25"+
    "\12\72\340\25\12\72\166\25\12\72\106\25\12\72\u0356\25"+
    "\1\73\u027f\25\13\1\1\0\2\25\32\0\2\1\5\0"+
    "\1\1\17\0\2\71\36\0\1\1\20\0\u0120\25\u0170\0"+
    "\360\25\20\0\1\1\u05ff\25\u0100\74\u0100\75\320\25\40\0"+
    "\u010e\25\2\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[8704];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\1"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\14\21"+
    "\1\24\1\14\1\0\1\25\1\0\1\26\1\0\1\27"+
    "\1\30\1\31\1\32\1\33\2\0\1\34\1\21\1\0"+
    "\14\21\1\35\4\21\1\30\3\0\1\21\1\0\1\21"+
    "\1\36\4\21\1\37\1\21\1\0\1\40\1\0\1\21"+
    "\1\41\7\21\2\0\6\21\2\0\1\42\1\0\7\21"+
    "\2\0\6\21\1\0\1\21\2\0\3\21\1\0\1\43"+
    "\5\0\2\21\1\0\1\44\1\0\4\21\1\45\3\21"+
    "\1\0\1\46\2\0\2\21\1\0\4\21\1\0\1\47"+
    "\1\0\2\21\2\0\2\21\2\0\3\21\1\0\2\21"+
    "\1\0\1\50\1\0\1\51\1\21\1\0\2\21\1\52"+
    "\5\21\2\0\1\21\1\0\1\53\1\0\1\21\1\0"+
    "\1\54\1\21\1\0\1\21\1\0\1\55\2\0\1\56"+
    "\1\21\1\0\2\21\1\0\1\21\2\0\1\57\1\21"+
    "\1\0\1\21\1\0\1\21\2\0\2\21\1\60\1\21"+
    "\1\0\30\21\1\0\1\61\1\0\4\21\1\0\1\21"+
    "\1\0\1\62\2\0\1\63\1\0\1\21\1\0\1\64"+
    "\3\0\1\21\1\0\2\21\1\65\3\0\1\21\1\0"+
    "\1\66\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\76\0\174\0\272\0\76\0\370\0\76"+
    "\0\76\0\76\0\76\0\76\0\76\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\76\0\u026c\0\u02aa\0\u02e8\0\76\0\76"+
    "\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8"+
    "\0\u0516\0\u0554\0\u0592\0\u05d0\0\76\0\u060e\0\u064c\0\76"+
    "\0\272\0\76\0\370\0\76\0\u068a\0\76\0\76\0\76"+
    "\0\u06c8\0\u0706\0\76\0\76\0\u0744\0\u0782\0\u07c0\0\u07fe"+
    "\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee"+
    "\0\u0a2c\0\u02e8\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0"+
    "\0\u0bde\0\u02aa\0\u0c1c\0\u0c5a\0\u0c98\0\u02e8\0\u0cd6\0\u0d14"+
    "\0\u0d52\0\u0d90\0\u02e8\0\u0dce\0\u0e0c\0\76\0\u0e4a\0\u0e88"+
    "\0\u02e8\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a"+
    "\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a"+
    "\0\u1268\0\u12a6\0\76\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc"+
    "\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc"+
    "\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc"+
    "\0\u17fa\0\u1838\0\u1876\0\76\0\u18b4\0\u18f2\0\u1930\0\u196e"+
    "\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\76\0\u1aa4\0\u1ae2\0\u1b20"+
    "\0\u1b5e\0\u1b9c\0\76\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\76"+
    "\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84"+
    "\0\u1ec2\0\u1f00\0\76\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036"+
    "\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226"+
    "\0\u2264\0\u22a2\0\u22e0\0\76\0\u231e\0\76\0\u235c\0\u239a"+
    "\0\u23d8\0\u2416\0\76\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c"+
    "\0\u258a\0\u25c8\0\u2606\0\u2644\0\76\0\u2682\0\u26c0\0\u26fe"+
    "\0\76\0\u273c\0\u277a\0\u27b8\0\u27f6\0\76\0\u2834\0\u2872"+
    "\0\76\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24"+
    "\0\u2a62\0\76\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6"+
    "\0\u2c14\0\u2c52\0\u2c90\0\76\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88"+
    "\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78"+
    "\0\u2fb6\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168"+
    "\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\76"+
    "\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a"+
    "\0\76\0\u3548\0\u3586\0\76\0\u35c4\0\u3602\0\u3640\0\76"+
    "\0\u367e\0\u36bc\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u37f2\0\u3830"+
    "\0\u386e\0\u38ac\0\u38ea\0\u3830\0\u3928\0\76\0\76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\13\26\1\27\1\30\1\31"+
    "\1\26\1\32\1\33\1\26\1\34\2\26\1\35\1\36"+
    "\1\26\1\37\1\40\1\41\1\42\1\26\1\43\1\44"+
    "\5\26\1\45\1\2\1\46\1\26\1\47\120\0\1\50"+
    "\54\0\3\51\1\52\72\51\5\53\1\52\70\53\14\0"+
    "\1\54\1\0\1\55\53\0\1\55\20\0\1\56\74\0"+
    "\1\55\1\0\1\20\53\0\1\20\22\0\1\57\77\0"+
    "\1\60\4\0\1\61\3\0\1\62\64\0\1\63\64\0"+
    "\1\64\100\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\27\26\1\0\3\26\1\47\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\14\26\1\66\4\26"+
    "\1\67\5\26\1\0\3\26\1\47\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\7\26\1\70\5\26"+
    "\1\71\11\26\1\0\3\26\1\47\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\4\26\1\72\3\26"+
    "\1\73\16\26\1\0\3\26\1\47\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\15\26\1\74\11\26"+
    "\1\0\3\26\1\47\14\0\2\26\1\0\1\26\1\65"+
    "\4\0\13\26\2\0\3\26\1\75\23\26\1\0\3\26"+
    "\1\47\14\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\4\26\1\76\22\26\1\0\3\26\1\47\14\0"+
    "\2\26\1\0\1\26\1\65\4\0\13\26\2\0\15\26"+
    "\1\77\11\26\1\0\3\26\1\47\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\1\100\14\26\1\101"+
    "\11\26\1\0\3\26\1\47\14\0\2\26\1\0\1\26"+
    "\1\65\4\0\13\26\2\0\17\26\1\102\7\26\1\0"+
    "\3\26\1\47\14\0\2\26\1\0\1\26\1\65\4\0"+
    "\13\26\2\0\1\103\16\26\1\104\7\26\1\0\3\26"+
    "\1\47\14\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\4\26\1\105\22\26\1\0\3\26\1\47\14\0"+
    "\2\26\1\0\1\26\1\65\4\0\13\26\2\0\4\26"+
    "\1\106\22\26\1\0\3\26\1\47\14\0\1\26\1\107"+
    "\1\0\1\46\1\65\4\0\13\26\2\0\27\26\1\0"+
    "\1\26\1\46\1\26\1\47\76\0\1\26\16\0\1\55"+
    "\53\0\1\55\41\0\1\110\63\0\1\111\61\0\1\64"+
    "\12\0\1\112\13\113\2\0\27\113\2\0\2\113\1\114"+
    "\14\0\2\26\1\0\1\26\1\65\4\0\13\26\2\0"+
    "\2\26\1\115\1\116\23\26\1\0\3\26\1\47\14\0"+
    "\2\26\1\0\1\26\1\65\4\0\13\26\2\0\21\26"+
    "\1\117\5\26\1\0\3\26\1\47\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\10\26\1\120\16\26"+
    "\1\0\3\26\1\47\14\0\2\26\1\0\1\26\1\65"+
    "\4\0\13\26\2\0\13\26\1\121\13\26\1\0\3\26"+
    "\1\47\14\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\20\26\1\122\6\26\1\0\3\26\1\47\14\0"+
    "\2\26\1\0\1\26\1\65\4\0\13\26\2\0\23\26"+
    "\1\123\3\26\1\0\3\26\1\47\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\12\26\1\124\14\26"+
    "\1\0\3\26\1\47\2\0\1\125\4\0\1\126\4\0"+
    "\2\26\1\0\1\26\1\127\4\0\13\26\2\0\27\26"+
    "\1\0\2\26\1\75\1\47\14\0\2\26\1\0\1\26"+
    "\1\65\4\0\13\26\2\0\26\26\1\130\1\0\3\26"+
    "\1\47\14\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\3\26\1\131\23\26\1\0\3\26\1\47\14\0"+
    "\2\26\1\0\1\26\1\65\4\0\13\26\2\0\13\26"+
    "\1\132\13\26\1\0\3\26\1\47\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\3\26\1\133\23\26"+
    "\1\0\3\26\1\47\14\0\2\26\1\0\1\26\1\65"+
    "\4\0\13\26\2\0\17\26\1\134\7\26\1\0\3\26"+
    "\1\47\14\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\4\26\1\135\10\26\1\136\11\26\1\0\3\26"+
    "\1\47\14\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\12\26\1\137\14\26\1\0\3\26\1\47\14\0"+
    "\2\26\1\0\1\26\1\65\4\0\13\26\2\0\25\26"+
    "\1\140\1\26\1\0\3\26\1\47\14\0\2\26\1\0"+
    "\1\107\1\65\4\0\13\26\2\0\27\26\1\0\1\26"+
    "\1\107\1\26\1\47\33\0\1\141\100\0\1\142\53\0"+
    "\2\113\1\0\1\113\5\0\13\113\2\0\27\113\1\0"+
    "\3\113\1\114\76\0\1\113\13\0\2\26\1\0\1\26"+
    "\1\65\4\0\13\26\2\0\4\26\1\143\22\26\1\0"+
    "\3\26\1\47\14\0\2\26\1\0\1\26\1\65\4\0"+
    "\13\26\2\0\17\26\1\144\7\26\1\0\3\26\1\47"+
    "\14\0\2\26\1\0\1\26\1\65\4\0\13\26\2\0"+
    "\12\26\1\145\14\26\1\0\3\26\1\47\14\0\2\26"+
    "\1\0\1\26\1\65\4\0\13\26\2\0\13\26\1\146"+
    "\13\26\1\0\3\26\1\47\14\0\2\26\1\0\1\26"+
    "\1\65\4\0\13\26\2\0\2\26\1\147\24\26\1\0"+
    "\3\26\1\47\14\0\2\26\1\0\1\26\1\65\4\0"+
    "\13\26\2\0\12\26\1\150\14\26\1\0\3\26\1\47"+
    "\2\0\1\125\4\0\1\126\10\0\1\151\53\0\1\125"+
    "\12\0\1\64\6\0\1\126\3\0\1\112\13\113\2\0"+
    "\27\113\2\0\2\113\1\114\2\0\1\152\4\0\1\153"+
    "\4\0\2\26\1\0\1\26\1\154\4\0\13\26\2\0"+
    "\27\26\1\0\2\26\1\130\1\47\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\4\26\1\155\22\26"+
    "\1\0\3\26\1\47\14\0\2\26\1\0\1\26\1\65"+
    "\4\0\13\26\2\0\4\26\1\156\22\26\1\0\3\26"+
    "\1\47\14\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\4\26\1\157\22\26\1\0\3\26\1\47\14\0"+
    "\2\26\1\0\1\26\1\65\4\0\13\26\2\0\2\26"+
    "\1\160\24\26\1\0\3\26\1\47\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\2\26\1\161\24\26"+
    "\1\0\3\26\1\47\14\0\2\26\1\0\1\26\1\65"+
    "\4\0\13\26\2\0\5\26\1\162\21\26\1\0\3\26"+
    "\1\47\14\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\21\26\1\163\5\26\1\0\3\26\1\47\34\0"+
    "\1\164\77\0\1\165\53\0\2\26\1\0\1\26\1\65"+
    "\4\0\13\26\2\0\20\26\1\166\6\26\1\0\3\26"+
    "\1\47\14\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\10\26\1\167\16\26\1\0\3\26\1\47\14\0"+
    "\2\26\1\0\1\26\1\65\4\0\13\26\2\0\3\26"+
    "\1\170\23\26\1\0\3\26\1\47\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\4\26\1\171\22\26"+
    "\1\0\3\26\1\47\14\0\2\26\1\0\1\26\1\65"+
    "\4\0\13\26\2\0\4\26\1\172\22\26\1\0\3\26"+
    "\1\47\14\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\15\26\1\173\11\26\1\0\3\26\1\47\20\0"+
    "\1\126\57\0\1\152\4\0\1\153\10\0\1\174\53\0"+
    "\1\152\12\0\1\64\6\0\1\153\3\0\1\112\13\113"+
    "\2\0\27\113\2\0\2\113\1\114\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\20\26\1\175\6\26"+
    "\1\0\3\26\1\47\2\0\1\176\4\0\1\177\4\0"+
    "\2\26\1\0\1\26\1\65\4\0\13\26\2\0\27\26"+
    "\1\0\2\26\1\156\1\47\14\0\2\26\1\0\1\26"+
    "\1\65\4\0\13\26\2\0\14\26\1\200\12\26\1\0"+
    "\3\26\1\47\14\0\2\26\1\0\1\26\1\65\4\0"+
    "\13\26\2\0\4\26\1\201\22\26\1\0\3\26\1\47"+
    "\14\0\2\26\1\0\1\26\1\65\4\0\13\26\2\0"+
    "\4\26\1\202\22\26\1\0\3\26\1\47\2\0\1\203"+
    "\4\0\1\204\4\0\2\26\1\0\1\26\1\205\4\0"+
    "\13\26\2\0\27\26\1\0\2\26\1\162\1\47\2\0"+
    "\1\206\4\0\1\207\4\0\2\26\1\0\1\26\1\65"+
    "\4\0\13\26\2\0\27\26\1\0\2\26\1\163\1\47"+
    "\27\0\1\210\75\0\1\211\62\0\2\26\1\0\1\26"+
    "\1\65\4\0\13\26\2\0\21\26\1\212\5\26\1\0"+
    "\3\26\1\47\14\0\2\26\1\0\1\26\1\65\4\0"+
    "\13\26\2\0\1\26\1\213\25\26\1\0\3\26\1\47"+
    "\2\0\1\214\4\0\1\215\4\0\2\26\1\0\1\26"+
    "\1\216\4\0\13\26\2\0\27\26\1\0\2\26\1\170"+
    "\1\47\14\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\14\26\1\217\12\26\1\0\3\26\1\47\14\0"+
    "\2\26\1\0\1\26\1\65\4\0\13\26\2\0\14\26"+
    "\1\220\12\26\1\0\3\26\1\47\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\24\26\1\221\2\26"+
    "\1\0\3\26\1\47\20\0\1\153\71\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\16\26\1\222\10\26"+
    "\1\0\3\26\1\47\2\0\1\176\4\0\1\177\64\0"+
    "\1\176\11\0\1\223\101\0\2\26\1\0\1\26\1\65"+
    "\4\0\13\26\2\0\21\26\1\224\5\26\1\0\3\26"+
    "\1\47\14\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\3\26\1\225\23\26\1\0\3\26\1\47\14\0"+
    "\2\26\1\0\1\26\1\65\4\0\13\26\2\0\20\26"+
    "\1\226\6\26\1\0\3\26\1\47\2\0\1\203\4\0"+
    "\1\204\10\0\1\227\53\0\1\203\12\0\1\64\6\0"+
    "\1\204\3\0\1\112\13\113\2\0\27\113\2\0\2\113"+
    "\1\114\2\0\1\206\4\0\1\207\64\0\1\206\11\0"+
    "\1\230\122\0\1\231\74\0\1\232\55\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\15\26\1\233\11\26"+
    "\1\0\3\26\1\47\14\0\2\26\1\0\1\26\1\65"+
    "\4\0\13\26\2\0\22\26\1\234\4\26\1\0\3\26"+
    "\1\47\2\0\1\214\4\0\1\215\10\0\1\235\53\0"+
    "\1\214\12\0\1\64\6\0\1\215\3\0\1\112\13\113"+
    "\2\0\27\113\2\0\2\113\1\114\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\21\26\1\236\5\26"+
    "\1\0\3\26\1\47\14\0\2\26\1\0\1\26\1\65"+
    "\4\0\13\26\2\0\3\26\1\237\23\26\1\0\3\26"+
    "\1\47\14\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\10\26\1\240\16\26\1\0\3\26\1\47\14\0"+
    "\2\26\1\0\1\26\1\65\4\0\13\26\2\0\1\241"+
    "\26\26\1\0\3\26\1\47\2\0\1\242\4\0\1\243"+
    "\4\0\2\26\1\0\1\26\1\244\4\0\13\26\2\0"+
    "\27\26\1\0\2\26\1\224\1\47\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\10\26\1\245\16\26"+
    "\1\0\3\26\1\47\14\0\2\26\1\0\1\26\1\65"+
    "\4\0\13\26\2\0\20\26\1\246\6\26\1\0\3\26"+
    "\1\47\20\0\1\204\112\0\1\247\71\0\1\250\60\0"+
    "\2\26\1\0\1\26\1\65\4\0\13\26\2\0\17\26"+
    "\1\251\7\26\1\0\3\26\1\47\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\21\26\1\252\5\26"+
    "\1\0\3\26\1\47\20\0\1\215\57\0\1\253\4\0"+
    "\1\254\4\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\27\26\1\0\2\26\1\236\1\47\14\0\2\26"+
    "\1\0\1\26\1\65\4\0\13\26\2\0\1\255\26\26"+
    "\1\0\3\26\1\47\14\0\2\26\1\0\1\26\1\65"+
    "\4\0\13\26\2\0\14\26\1\256\12\26\1\0\3\26"+
    "\1\47\14\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\2\26\1\257\24\26\1\0\3\26\1\47\2\0"+
    "\1\242\4\0\1\243\10\0\1\260\53\0\1\242\12\0"+
    "\1\64\6\0\1\243\3\0\1\112\13\113\2\0\27\113"+
    "\2\0\2\113\1\114\14\0\2\26\1\0\1\26\1\65"+
    "\4\0\13\26\2\0\14\26\1\261\12\26\1\0\3\26"+
    "\1\47\14\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\10\26\1\262\16\26\1\0\3\26\1\47\30\0"+
    "\1\263\70\0\1\264\54\0\1\265\4\0\1\266\4\0"+
    "\1\267\1\26\1\0\1\26\1\270\4\0\13\26\2\0"+
    "\27\26\1\0\2\26\1\271\1\47\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\4\26\1\272\22\26"+
    "\1\0\3\26\1\47\2\0\1\253\4\0\1\254\64\0"+
    "\1\253\11\0\1\273\101\0\2\26\1\0\1\26\1\65"+
    "\4\0\13\26\2\0\14\26\1\274\12\26\1\0\3\26"+
    "\1\47\14\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\6\26\1\275\20\26\1\0\3\26\1\47\14\0"+
    "\2\26\1\0\1\26\1\65\4\0\13\26\2\0\4\26"+
    "\1\276\22\26\1\0\3\26\1\47\20\0\1\243\71\0"+
    "\2\26\1\0\1\26\1\65\4\0\13\26\2\0\6\26"+
    "\1\277\20\26\1\0\3\26\1\47\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\14\26\1\300\12\26"+
    "\1\0\3\26\1\47\32\0\1\301\45\0\1\265\4\0"+
    "\1\266\10\0\1\302\53\0\1\265\15\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\15\26\1\303\11\26"+
    "\1\0\3\26\1\47\11\0\1\64\6\0\1\266\3\0"+
    "\1\112\13\113\2\0\27\113\2\0\2\113\1\114\2\0"+
    "\1\265\4\0\1\266\4\0\2\26\1\0\1\26\1\270"+
    "\4\0\13\26\2\0\27\26\1\0\2\26\1\271\1\47"+
    "\2\0\1\304\4\0\1\305\4\0\2\26\1\0\1\26"+
    "\1\306\4\0\13\26\2\0\27\26\1\0\2\26\1\272"+
    "\1\47\14\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\21\26\1\307\5\26\1\0\3\26\1\47\2\0"+
    "\1\310\4\0\1\311\4\0\1\312\1\26\1\0\1\26"+
    "\1\313\4\0\13\26\2\0\27\26\1\0\2\26\1\314"+
    "\1\47\2\0\1\315\4\0\1\316\4\0\2\26\1\0"+
    "\1\26\1\317\4\0\13\26\2\0\27\26\1\0\2\26"+
    "\1\276\1\47\2\0\1\320\4\0\1\321\4\0\1\322"+
    "\1\26\1\0\1\26\1\323\4\0\13\26\2\0\27\26"+
    "\1\0\2\26\1\324\1\47\14\0\2\26\1\0\1\26"+
    "\1\65\4\0\13\26\2\0\6\26\1\325\20\26\1\0"+
    "\3\26\1\47\31\0\1\326\64\0\1\266\71\0\2\26"+
    "\1\0\1\26\1\65\4\0\13\26\2\0\17\26\1\327"+
    "\7\26\1\0\3\26\1\47\2\0\1\304\4\0\1\305"+
    "\10\0\1\330\53\0\1\304\12\0\1\64\6\0\1\305"+
    "\3\0\1\112\13\113\2\0\27\113\2\0\2\113\1\114"+
    "\2\0\1\331\4\0\1\332\4\0\1\333\1\26\1\0"+
    "\1\26\1\334\4\0\13\26\2\0\27\26\1\0\2\26"+
    "\1\335\1\47\2\0\1\310\4\0\1\311\10\0\1\336"+
    "\53\0\1\310\15\0\2\26\1\0\1\26\1\65\4\0"+
    "\13\26\2\0\20\26\1\337\6\26\1\0\3\26\1\47"+
    "\11\0\1\64\6\0\1\311\3\0\1\112\13\113\2\0"+
    "\27\113\2\0\2\113\1\114\2\0\1\310\4\0\1\311"+
    "\4\0\2\26\1\0\1\26\1\313\4\0\13\26\2\0"+
    "\27\26\1\0\2\26\1\314\1\47\2\0\1\315\4\0"+
    "\1\316\10\0\1\340\53\0\1\315\12\0\1\64\6\0"+
    "\1\316\3\0\1\112\13\113\2\0\27\113\2\0\2\113"+
    "\1\114\2\0\1\320\4\0\1\321\10\0\1\341\53\0"+
    "\1\320\15\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\20\26\1\342\6\26\1\0\3\26\1\47\11\0"+
    "\1\64\6\0\1\321\3\0\1\112\13\113\2\0\27\113"+
    "\2\0\2\113\1\114\2\0\1\320\4\0\1\321\4\0"+
    "\2\26\1\0\1\26\1\323\4\0\13\26\2\0\27\26"+
    "\1\0\2\26\1\324\1\47\14\0\1\343\1\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\27\26\1\0\3\26"+
    "\1\47\23\0\1\344\66\0\1\345\1\26\1\0\1\26"+
    "\1\65\4\0\13\26\2\0\27\26\1\0\3\26\1\47"+
    "\20\0\1\305\57\0\1\331\4\0\1\332\10\0\1\346"+
    "\53\0\1\331\15\0\2\26\1\0\1\26\1\65\4\0"+
    "\13\26\2\0\15\26\1\347\11\26\1\0\3\26\1\47"+
    "\11\0\1\64\6\0\1\332\3\0\1\112\13\113\2\0"+
    "\27\113\2\0\2\113\1\114\2\0\1\331\4\0\1\332"+
    "\4\0\2\26\1\0\1\26\1\334\4\0\13\26\2\0"+
    "\27\26\1\0\2\26\1\335\1\47\20\0\1\311\71\0"+
    "\2\26\1\0\1\26\1\65\4\0\13\26\2\0\10\26"+
    "\1\350\16\26\1\0\3\26\1\47\20\0\1\316\75\0"+
    "\1\321\71\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\10\26\1\351\16\26\1\0\3\26\1\47\14\0"+
    "\2\26\1\0\1\26\1\65\4\0\13\26\2\0\10\26"+
    "\1\352\16\26\1\0\3\26\1\47\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\20\26\1\353\6\26"+
    "\1\0\3\26\1\47\20\0\1\332\71\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\17\26\1\354\7\26"+
    "\1\0\3\26\1\47\14\0\2\26\1\0\1\26\1\65"+
    "\4\0\13\26\2\0\1\26\1\355\25\26\1\0\3\26"+
    "\1\47\14\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\1\26\1\356\25\26\1\0\3\26\1\47\14\0"+
    "\2\26\1\0\1\26\1\65\4\0\13\26\2\0\14\26"+
    "\1\357\12\26\1\0\3\26\1\47\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\4\26\1\360\22\26"+
    "\1\0\3\26\1\47\14\0\1\361\1\26\1\0\1\26"+
    "\1\65\4\0\13\26\2\0\27\26\1\0\3\26\1\47"+
    "\14\0\2\26\1\0\1\26\1\65\4\0\13\26\2\0"+
    "\12\26\1\362\14\26\1\0\3\26\1\47\14\0\2\26"+
    "\1\0\1\26\1\65\4\0\13\26\2\0\12\26\1\363"+
    "\14\26\1\0\3\26\1\47\14\0\2\26\1\0\1\26"+
    "\1\65\4\0\13\26\2\0\20\26\1\364\6\26\1\0"+
    "\3\26\1\47\14\0\2\26\1\0\1\26\1\65\4\0"+
    "\13\26\2\0\12\26\1\365\14\26\1\0\3\26\1\47"+
    "\14\0\2\26\1\0\1\26\1\65\4\0\13\26\2\0"+
    "\20\26\1\366\6\26\1\0\3\26\1\47\14\0\2\26"+
    "\1\0\1\26\1\65\4\0\13\26\2\0\10\26\1\367"+
    "\16\26\1\0\3\26\1\47\14\0\2\26\1\0\1\26"+
    "\1\65\4\0\13\26\2\0\10\26\1\370\16\26\1\0"+
    "\3\26\1\47\14\0\2\26\1\0\1\26\1\65\4\0"+
    "\13\26\2\0\21\26\1\371\5\26\1\0\3\26\1\47"+
    "\14\0\2\26\1\0\1\26\1\65\4\0\13\26\2\0"+
    "\5\26\1\372\21\26\1\0\3\26\1\47\14\0\2\26"+
    "\1\0\1\26\1\65\4\0\13\26\2\0\4\26\1\373"+
    "\22\26\1\0\3\26\1\47\14\0\2\26\1\0\1\26"+
    "\1\65\4\0\13\26\2\0\14\26\1\374\12\26\1\0"+
    "\3\26\1\47\14\0\2\26\1\0\1\26\1\65\4\0"+
    "\13\26\2\0\14\26\1\375\12\26\1\0\3\26\1\47"+
    "\14\0\2\26\1\0\1\26\1\65\4\0\13\26\2\0"+
    "\17\26\1\376\7\26\1\0\3\26\1\47\2\0\1\377"+
    "\4\0\1\u0100\4\0\2\26\1\0\1\26\1\u0101\4\0"+
    "\13\26\2\0\27\26\1\0\2\26\1\372\1\47\14\0"+
    "\2\26\1\0\1\26\1\65\4\0\13\26\2\0\12\26"+
    "\1\u0102\14\26\1\0\3\26\1\47\14\0\2\26\1\0"+
    "\1\26\1\65\4\0\13\26\2\0\6\26\1\u0103\20\26"+
    "\1\0\3\26\1\47\14\0\2\26\1\0\1\26\1\65"+
    "\4\0\13\26\2\0\6\26\1\u0104\20\26\1\0\3\26"+
    "\1\47\14\0\2\26\1\0\1\26\1\65\4\0\13\26"+
    "\2\0\22\26\1\u0105\4\26\1\0\3\26\1\47\2\0"+
    "\1\377\4\0\1\u0100\10\0\1\u0106\53\0\1\377\12\0"+
    "\1\64\6\0\1\u0100\3\0\1\112\13\113\2\0\27\113"+
    "\2\0\2\113\1\114\14\0\2\26\1\0\1\26\1\65"+
    "\4\0\13\26\2\0\5\26\1\u0107\21\26\1\0\3\26"+
    "\1\47\2\0\1\u0108\4\0\1\u0109\4\0\2\26\1\0"+
    "\1\26\1\u010a\4\0\13\26\2\0\27\26\1\0\2\26"+
    "\1\u0103\1\47\2\0\1\u010b\4\0\1\u010c\4\0\2\26"+
    "\1\0\1\26\1\u010d\4\0\13\26\2\0\27\26\1\0"+
    "\2\26\1\u0104\1\47\14\0\2\26\1\0\1\26\1\65"+
    "\4\0\13\26\2\0\2\26\1\u010e\24\26\1\0\3\26"+
    "\1\47\20\0\1\u0100\57\0\1\u010f\4\0\1\u0110\4\0"+
    "\2\26\1\0\1\26\1\u0111\4\0\13\26\2\0\27\26"+
    "\1\0\2\26\1\u0107\1\47\2\0\1\u0108\4\0\1\u0109"+
    "\10\0\1\u0112\53\0\1\u0108\12\0\1\64\6\0\1\u0109"+
    "\3\0\1\112\13\113\2\0\27\113\2\0\2\113\1\114"+
    "\2\0\1\u010b\4\0\1\u010c\10\0\1\u0113\53\0\1\u010b"+
    "\12\0\1\64\6\0\1\u010c\3\0\1\112\13\113\2\0"+
    "\27\113\2\0\2\113\1\114\14\0\2\26\1\0\1\26"+
    "\1\65\4\0\13\26\2\0\21\26\1\u0114\5\26\1\0"+
    "\3\26\1\47\2\0\1\u010f\4\0\1\u0110\10\0\1\u0115"+
    "\53\0\1\u010f\12\0\1\64\6\0\1\u0110\3\0\1\112"+
    "\13\113\2\0\27\113\2\0\2\113\1\114\20\0\1\u0109"+
    "\75\0\1\u010c\71\0\2\26\1\0\1\26\1\65\4\0"+
    "\13\26\2\0\10\26\1\u0116\16\26\1\0\3\26\1\47"+
    "\20\0\1\u0110\71\0\2\26\1\0\1\26\1\65\4\0"+
    "\13\26\2\0\15\26\1\u0117\11\26\1\0\3\26\1\47"+
    "\14\0\2\26\1\0\1\26\1\65\4\0\13\26\2\0"+
    "\14\26\1\u0118\12\26\1\0\3\26\1\47\2\0\1\u0119"+
    "\4\0\1\u011a\4\0\2\26\1\0\1\26\1\u011b\4\0"+
    "\13\26\2\0\27\26\1\0\2\26\1\u011c\1\47\2\0"+
    "\1\u0119\4\0\1\u011a\10\0\1\u011d\53\0\1\u0119\11\0"+
    "\1\u011e\76\0\1\64\6\0\1\u011f\3\0\1\112\13\113"+
    "\2\0\27\113\2\0\2\113\1\114\20\0\1\u011f\56\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[14694];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\1\1\6\11\5\1\1\11"+
    "\3\1\2\11\14\1\1\11\1\1\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\1\3\11\2\0\2\11\1\0"+
    "\22\1\3\0\1\1\1\0\10\1\1\0\1\11\1\0"+
    "\11\1\2\0\6\1\2\0\1\11\1\0\7\1\2\0"+
    "\6\1\1\0\1\1\2\0\3\1\1\0\1\11\5\0"+
    "\2\1\1\0\1\11\1\0\4\1\1\11\3\1\1\0"+
    "\1\11\2\0\2\1\1\0\4\1\1\0\1\11\1\0"+
    "\2\1\2\0\2\1\2\0\3\1\1\0\2\1\1\0"+
    "\1\11\1\0\1\11\1\1\1\0\2\1\1\11\5\1"+
    "\2\0\1\1\1\0\1\11\1\0\1\1\1\0\1\11"+
    "\1\1\1\0\1\1\1\0\1\11\2\0\1\11\1\1"+
    "\1\0\2\1\1\0\1\1\2\0\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\2\1\1\11\1\1\1\0"+
    "\30\1\1\0\1\11\1\0\4\1\1\0\1\1\1\0"+
    "\1\11\2\0\1\11\1\0\1\1\1\0\1\11\3\0"+
    "\1\1\1\0\3\1\3\0\1\1\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
        int last;

        void initialize() {
            last = -1;
        }

        static boolean isWhitespace(int c) {
            return (c == ' ' || c == '\t' || c == '\r' || c == '\n'  || c == '\f');
        }

        /**
	 * Lookahead disambiguation is now handled in the patterns: If
         * symbol is not followed by '::' or '(', then treat it as a
         * name instead of an axis or function (Jira-1912).
	 */

        /**
         * If symbol is first token or if it follows any of the operators
         * listed in http://www.w3.org/TR/xpath#exprlex then treat as a 
         * name instead of a keyword (Jira-1912).
         */ 
        Symbol disambiguateOperator(int ss) throws Exception {
            switch (last) {
            case -1:    // first token
            case sym.ATSIGN:
            case sym.DCOLON:
            case sym.LPAREN:
            case sym.LBRACK:
            case sym.COMMA:
            case sym.AND:
            case sym.OR:
            case sym.MOD:
            case sym.DIV:
            case sym.MULT:
            case sym.SLASH:
            case sym.DSLASH:
            case sym.VBAR:
            case sym.PLUS:
            case sym.MINUS:
            case sym.EQ:
            case sym.NE:
            case sym.LT:
            case sym.LE:
            case sym.GT:
            case sym.GE:
                return newSymbol(sym.QNAME, yytext());
            }
            return newSymbol(ss);
        }

        /**
         * If symbol is first token or if it follows any of the operators
         * listed in http://www.w3.org/TR/xpath#exprlex then treat as a
         * wildcard instead of a multiplication operator
         */
        Symbol disambiguateStar() throws Exception {
            switch (last) {
            case -1:    // first token
            case sym.ATSIGN:
            case sym.DCOLON:
            case sym.LPAREN:
            case sym.LBRACK:
            case sym.COMMA:
            case sym.AND:
            case sym.OR:
            case sym.MOD:
            case sym.DIV:
            case sym.MULT:
            case sym.SLASH:
            case sym.DSLASH:
            case sym.VBAR:
            case sym.PLUS:
            case sym.MINUS:
            case sym.EQ:
            case sym.NE:
            case sym.LT:
            case sym.LE:
            case sym.GT:
            case sym.GE:
                return newSymbol(sym.STAR);
            }
            return newSymbol(sym.MULT);
        }

        Symbol newSymbol(int ss) {
            last = ss;
            return new Symbol(ss);
        }

        Symbol newSymbol(int ss, String value) {
            last = ss;
            return new Symbol(ss, value);
        }

        Symbol newSymbol(int ss, Long value) {
            last = ss;
            return new Symbol(ss, value);
        }

        Symbol newSymbol(int ss, Double value) {
            last = ss;
            return new Symbol(ss, value);
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  XPathLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
    , Exception

  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { return newSymbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Exception(yytext());
            }
          // fall through
          case 56: break;
          case 2:
            { /* ignore white space. */
            }
          // fall through
          case 57: break;
          case 3:
            { return newSymbol(sym.DOLLAR);
            }
          // fall through
          case 58: break;
          case 4:
            { return newSymbol(sym.LPAREN);
            }
          // fall through
          case 59: break;
          case 5:
            { return newSymbol(sym.RPAREN);
            }
          // fall through
          case 60: break;
          case 6:
            { return disambiguateStar();
            }
          // fall through
          case 61: break;
          case 7:
            { return newSymbol(sym.PLUS);
            }
          // fall through
          case 62: break;
          case 8:
            { return newSymbol(sym.COMMA);
            }
          // fall through
          case 63: break;
          case 9:
            { return newSymbol(sym.MINUS);
            }
          // fall through
          case 64: break;
          case 10:
            { return newSymbol(sym.DOT);
            }
          // fall through
          case 65: break;
          case 11:
            { return newSymbol(sym.SLASH);
            }
          // fall through
          case 66: break;
          case 12:
            { return newSymbol(sym.INT, new Long(yytext()));
            }
          // fall through
          case 67: break;
          case 13:
            { return newSymbol(sym.LT);
            }
          // fall through
          case 68: break;
          case 14:
            { return newSymbol(sym.EQ);
            }
          // fall through
          case 69: break;
          case 15:
            { return newSymbol(sym.GT);
            }
          // fall through
          case 70: break;
          case 16:
            { return newSymbol(sym.ATSIGN);
            }
          // fall through
          case 71: break;
          case 17:
            { return newSymbol(sym.QNAME, yytext());
            }
          // fall through
          case 72: break;
          case 18:
            { return newSymbol(sym.LBRACK);
            }
          // fall through
          case 73: break;
          case 19:
            { return newSymbol(sym.RBRACK);
            }
          // fall through
          case 74: break;
          case 20:
            { return newSymbol(sym.VBAR);
            }
          // fall through
          case 75: break;
          case 21:
            { return newSymbol(sym.NE);
            }
          // fall through
          case 76: break;
          case 22:
            { return newSymbol(sym.Literal,
			      yytext().substring(1, yytext().length() - 1));
            }
          // fall through
          case 77: break;
          case 23:
            { return newSymbol(sym.DDOT);
            }
          // fall through
          case 78: break;
          case 24:
            { return newSymbol(sym.REAL, new Double(yytext()));
            }
          // fall through
          case 79: break;
          case 25:
            { return newSymbol(sym.DSLASH);
            }
          // fall through
          case 80: break;
          case 26:
            { return newSymbol(sym.DCOLON);
            }
          // fall through
          case 81: break;
          case 27:
            { return newSymbol(sym.LE);
            }
          // fall through
          case 82: break;
          case 28:
            { return newSymbol(sym.GE);
            }
          // fall through
          case 83: break;
          case 29:
            { return disambiguateOperator(sym.OR);
            }
          // fall through
          case 84: break;
          case 30:
            { return disambiguateOperator(sym.AND);
            }
          // fall through
          case 85: break;
          case 31:
            { return disambiguateOperator(sym.DIV);
            }
          // fall through
          case 86: break;
          case 32:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return newSymbol(sym.ID);
            }
          // fall through
          case 87: break;
          case 33:
            { return disambiguateOperator(sym.MOD);
            }
          // fall through
          case 88: break;
          case 34:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return newSymbol(sym.KEY);
            }
          // fall through
          case 89: break;
          case 35:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return newSymbol(sym.SELF);
            }
          // fall through
          case 90: break;
          case 36:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return newSymbol(sym.CHILD);
            }
          // fall through
          case 91: break;
          case 37:
            { return newSymbol(sym.NODE);
            }
          // fall through
          case 92: break;
          case 38:
            { return newSymbol(sym.TEXT);
            }
          // fall through
          case 93: break;
          case 39:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);
            { return newSymbol(sym.PARENT);
            }
          // fall through
          case 94: break;
          case 40:
            { initialize(); return new Symbol(sym.PATTERN);
            }
          // fall through
          case 95: break;
          case 41:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 8);
            { return newSymbol(sym.ANCESTOR);
            }
          // fall through
          case 96: break;
          case 42:
            { return newSymbol(sym.COMMENT);
            }
          // fall through
          case 97: break;
          case 43:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 9);
            { return newSymbol(sym.ATTRIBUTE);
            }
          // fall through
          case 98: break;
          case 44:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 9);
            { return newSymbol(sym.FOLLOWING);
            }
          // fall through
          case 99: break;
          case 45:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 9);
            { return newSymbol(sym.NAMESPACE);
            }
          // fall through
          case 100: break;
          case 46:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 9);
            { return newSymbol(sym.PRECEDING);
            }
          // fall through
          case 101: break;
          case 47:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 10);
            { return newSymbol(sym.DESCENDANT);
            }
          // fall through
          case 102: break;
          case 48:
            { initialize(); return new Symbol(sym.EXPRESSION);
            }
          // fall through
          case 103: break;
          case 49:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 16);
            { return newSymbol(sym.ANCESTORORSELF);
            }
          // fall through
          case 104: break;
          case 50:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 17);
            { return newSymbol(sym.FOLLOWINGSIBLING);
            }
          // fall through
          case 105: break;
          case 51:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 17);
            { return newSymbol(sym.PRECEDINGSIBLING);
            }
          // fall through
          case 106: break;
          case 52:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 18);
            { return newSymbol(sym.DESCENDANTORSELF);
            }
          // fall through
          case 107: break;
          case 53:
            { return newSymbol(sym.PIPARAM);
            }
          // fall through
          case 108: break;
          case 54:
            { return newSymbol(sym.PI);
            }
          // fall through
          case 109: break;
          case 55:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 22);
            { return newSymbol(sym.PIPARAM);
            }
          // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
